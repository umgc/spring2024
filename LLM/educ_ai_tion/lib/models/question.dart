// Question Model
//
// Represents the data model for a question generated by the app. It includes properties for the question text, possible answers,
//the correct answer, and any relevant metadata such as difficulty level or topic.
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'difficulty_enum.dart';
import 'subject_enum.dart';

class Question {
  final String topic;
  final Difficulty difficulty;
  final String question;
  final DateTime date;
  final int grade;
  final Subject subject;
  final String answer;

  Question(
      {required this.topic,
      required this.difficulty,
      required this.question,
      required this.date,
      required this.grade,
      required this.subject,
      required this.answer});

  Map<String, dynamic> toMap() {
    return {
      'topic': topic,
      'difficulty': difficulty.toString().split('.').last.toLowerCase(),
      'question': question,
      'date': date,
      'grade': grade,
      'subject': subject.toString().split('.').last.toLowerCase(),
      'answer': answer
    };
  }

  factory Question.fromSnapshot(QueryDocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>;
    return Question(
        subject: _parseSubject(data['subject']),
        topic: data['topic'] ?? '',
        difficulty: _parseDifficulty(data['difficulty']),
        question: data['question'] ?? '',
        date: data['date'].toDate() ?? DateTime.now(),
        grade: data['grade'] ?? 0,
        answer: data['answer'] ?? '');
  }

  static Subject _parseSubject(String? subjectString) {
    if (subjectString == null || subjectString.isEmpty) {
      return Subject.Math; // Default subject
    }
    return Subject.values.firstWhere(
      (subject) =>
          subject.toString().split('.').last.toLowerCase() ==
          subjectString.toLowerCase(),
      orElse: () => Subject.Math, // Default subject
    );
  }

  static Difficulty _parseDifficulty(String? difficultyString) {
    if (difficultyString == null || difficultyString.isEmpty) {
      return Difficulty.easy; // Default difficulty
    }
    return Difficulty.values.firstWhere(
      (difficulty) =>
          difficulty.toString().split('.').last.toLowerCase() ==
          difficultyString.toLowerCase(),
      orElse: () => Difficulty.easy, // Default difficulty
    );
  }
}
